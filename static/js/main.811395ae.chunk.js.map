{"version":3,"sources":["services/apiUrls.js","components/RegistrationSection.jsx","App.js","reportWebVitals.js","index.js"],"names":["URLs","baseURL","registerURL","loginURL","siginOutURL","siginOutAllURL","userInfoURL","userDelURL","userUpdateURL","userImageURL","userCheckPass","userUpdateShelf","userGetShelf","bookImageURL","adminloginURL","RegistrationSection","useHistory","useState","errors","setErrors","firstName","lastName","email","username","newUser","setNewUser","conf","headers","handleChange","e","console","log","target","value","name","React","useEffect","validateUser","data","length","Container","fluid","Row","Col","className","Form","method","onSubmit","preventDefault","Object","keys","axios","post","then","res","status","catch","err","Group","controlId","Label","Control","type","placeholder","onChange","required","Text","as","minLength","Button","variant","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.811395ae.chunk.js","sourcesContent":["const URLs = {\r\n    baseURL : \"https://naghamdemo.appiancloud.com/suite/webapi\",\r\n\r\n    // user apis\r\n    registerURL : \"/test/register\",\r\n    loginURL : \"/api/users/login\",\r\n    siginOutURL : \"/api/signout\",\r\n    siginOutAllURL : \"/api/signoutAll\",\r\n    userInfoURL : \"/api/users/currentInfo\",\r\n    userDelURL : \"/api/users/currentInfo\",\r\n    userUpdateURL : \"/api/users/currentInfo\",\r\n    userImageURL : \"/userPhotos/\",\r\n    userCheckPass : \"/api/users/checkPassword\",\r\n    userUpdateShelf : \"/api/shelves/books/\",\r\n    userGetShelf : \"/api/shelves/books/\",\r\n    bookImageURL: \"/bookPhotos/\",\r\n    //admin apis\r\n    adminloginURL : \"/api/admin/login\",\r\n\r\n\r\n    \r\n}\r\n\r\nexport default URLs ;\r\n// axios.post('http://localhost:3200/api/users/currentInfo', {},{\r\n//     headers: {\r\n//       \"Content-Type\": \"application/json\",\r\n//       \"x-auth\": localStorage.getItem(\"token\"),\r\n//     }\r\n//   })\r\n//   .then(res => {\r\n//     if (res.status === 200) {\r\n//       console.log(\"fetched\", res);\r\n//       // this.props.history.push(\"/home\");\r\n//     }           \r\n//   })\r\n//   .catch(err => {            \r\n//     console.log(err);           \r\n//   });","import React ,{useState} from 'react'\r\nimport { Container,Form ,Col,Button,Row,Image } from 'react-bootstrap'\r\nimport axios from \"axios\";\r\nimport { useEffect } from 'react';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nimport URLs from '../services/apiUrls';\r\n\r\nfunction RegistrationSection() {\r\n  const history = useHistory();\r\n//   const [avatarPreview, setAvatarPreview] = useState('');\r\n  const [errors, setErrors] = useState({});\r\n  const [newUser, setNewUser] = useState(\r\n    {\r\n      firstName: '',\r\n      lastName: '',\r\n      email: '',\r\n    //   password: '',\r\n    //   confirmPass: '',\r\n    //   image:'',\r\n      username:''\r\n    }\r\n  );\r\n  \r\n    const conf = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Origin\":\"*\",\r\n        \"Appian-API-Key\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkZDEzNjcxOC1hYmEyLTQ3MjYtYTcwZS02MmZjZjcxODMwOWIifQ.tZXAkHVepXnS3IlpJmCPwIstl-VkYbaZpanxW5Jq_M8\"\r\n      }\r\n    };\r\n \r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (Object.keys(errors).length === 0) {\r\n    //   const formData = new FormData();\r\n    //   formData.append('image', newUser.image);\r\n    //   formData.append('firstName', newUser.firstName);\r\n    //   formData.append('lastName', newUser.lastName);\r\n    //   formData.append('email', newUser.email);\r\n    //   formData.append('password', newUser.password);\r\n    //   console.log(newUser);\r\n    //   console.log(formData.get('image'));\r\n      axios.post(`${URLs.baseURL}${URLs.registerURL}`, newUser, conf)\r\n          .then(res => {\r\n            if (res.status === 200) {\r\n            //   const value  = res.headers[\"x-auth\"] ;\r\n            //   localStorage.setItem(\"token\", JSON.stringify({value}) );\r\n              console.log(\"success\", res);\r\n            //   history.push(\"/\");\r\n            }else if(res.status === 208){\r\n              setErrors({email : `this Email: ${newUser.email} is already exists`});\r\n            }  \r\n            else if(res.status === 500){\r\n                console.log(res);    \r\n            }            \r\n          })\r\n          .catch(err => {            \r\n            console.log(err);           \r\n          });\r\n    }\r\n  }\r\n\r\n  const  handleChange = (e) => {\r\n    console.log(e.target.value);\r\n    setNewUser({...newUser, [e.target.name]: e.target.value})\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    console.log(newUser);\r\n    validateUser(newUser);\r\n  }, [newUser]);\r\n\r\n//   const handlePhoto = (e) => {\r\n//       setNewUser({...newUser, image: e.target.files[0]});\r\n//       setAvatarPreview(\r\n//         URL.createObjectURL(e.target.files[0])\r\n//       )\r\n//   };\r\n\r\n  const validateUser = (data) => {\r\n    setErrors({});\r\n    // console.log(data.image.name);\r\n    if ( data.username.length < 2) {\r\n        setErrors({username : \"Username cannot be less than 2 chars\"});\r\n    }else if (data.firstName.length < 2) {\r\n      setErrors({firstName : \"First Name cannot be less than 2 chars\"});\r\n    }else if ( data.lastName.length < 2) {\r\n      setErrors({lastName : \"Last Name cannot be less than 2 chars\"});\r\n    }else if (!data.email) {\r\n      setErrors({email : \"this field cannot be empty\"});\r\n    }\r\n    // else if (data.password.length <= 8) {\r\n    //   setErrors({ password : \"your password must be 8 chars length at least\"});\r\n    // } else if (data.password !== data.confirmPass) {\r\n    //   setErrors({ confirmPass : \"the password fields do not match, try again\"});\r\n    // }\r\n    // else if (! /\\.(jpe?g|png|gif|bmp)$/i.test(data.image.name) ){\r\n    //   setErrors({ image : \"the image extentsion must be like *. jpg|jpeg|png|gif|bmp \"});\r\n    // }\r\n    console.log(errors);\r\n    // return errors;\r\n  }\r\n\r\n\r\n    return (\r\n    <Container fluid>\r\n        \r\n        <Row>\r\n          <Col></Col>\r\n\r\n          <Col>\r\n          <Col className=\"border p-4 mt-5\">\r\n                <Form method=\"post\" onSubmit={handleSubmit}  >\r\n\r\n                <Form.Group controlId=\"formGridUsername\">\r\n                <Form.Label>Username</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Your username\" \r\n                            name=\"username\"\r\n                            value={newUser.username}\r\n                            onChange={handleChange} \r\n                            required\r\n                            />\r\n                <Form.Text className=\"text-danger\">\r\n                    {errors.username}\r\n                </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"formGridfname\">\r\n                        <Form.Label>First Name</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Your First Name\" \r\n                                name=\"firstName\"\r\n                                value={newUser.firstName}\r\n                                onChange={handleChange}\r\n                                minLength=\"2\" \r\n                                required\r\n                                />\r\n                        <Form.Text className=\"text-danger\">\r\n                        {errors.firstName}\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n                \r\n                    <Form.Group as={Col} controlId=\"formGridlname\">\r\n                        <Form.Label>Last Name</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Your Last Name\" \r\n                                name=\"lastName\"\r\n                                value={newUser.lastName}\r\n                                onChange={handleChange}\r\n                                minLength=\"2\"  \r\n                                required\r\n                                />\r\n                        <Form.Text className=\"text-danger\">\r\n                        {errors.lastName}\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n            \r\n                \r\n                <Form.Group controlId=\"formGridEmail\">\r\n                <Form.Label>Email</Form.Label>\r\n                <Form.Control type=\"email\" placeholder=\"Your Email\" \r\n                            name=\"email\"\r\n                            value={newUser.email}\r\n                            onChange={handleChange} \r\n                            required\r\n                            />\r\n                <Form.Text className=\"text-danger\">\r\n                    {errors.email}\r\n                </Form.Text>\r\n                </Form.Group>\r\n            \r\n                {/* <Form.Group controlId=\"formGridPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control type=\"password\" placeholder=\"Your Password\" \r\n                            name=\"password\"\r\n                            value={newUser.password}\r\n                            onChange={handleChange}\r\n                            minLength=\"8\" \r\n                            required\r\n                            />\r\n                <Form.Text className=\"text-danger\">\r\n                    {errors.password}\r\n                </Form.Text>\r\n                </Form.Group> */}\r\n\r\n                {/* <Form.Group controlId=\"formGridConfirmPassword\">\r\n                <Form.Label>Confirm Password</Form.Label>\r\n                <Form.Control type=\"password\" placeholder=\"Confirm Your Password\"\r\n                            name=\"confirmPass\"\r\n                            value={newUser.confirmPass}\r\n                            onChange={handleChange}\r\n                            minLength=\"8\" \r\n                            required\r\n                            />\r\n                <Form.Text className=\"text-danger\">\r\n                    {errors.confirmPass}\r\n                </Form.Text>\r\n                </Form.Group> */}\r\n\r\n                {/* <Form.Group controlId=\"formGridAvatar\">\r\n                <Form.Label>Photo</Form.Label>\r\n                <Form.Control \r\n                                type=\"file\" \r\n                                placeholder=\"Your Photo\"\r\n                                accept=\"image/*\"\r\n                                name=\"image\"\r\n                                onChange={handlePhoto} \r\n                                required\r\n                                className=\"form-control mb-1\"\r\n                                />\r\n                                {avatarPreview && <Image src={avatarPreview}  width={171} height={180} thumbnail />}\r\n                <Form.Text className=\"text-danger\">\r\n                    {errors.image}\r\n                </Form.Text>\r\n                </Form.Group> */}\r\n            \r\n                <hr />\r\n                <Button variant=\"success\" type=\"submit\" className=\"btn btn-block\">\r\n                Register\r\n                </Button>\r\n            </Form>\r\n            </Col>\r\n          </Col>\r\n          <Col></Col>\r\n        </Row>\r\n      </Container>\r\n        \r\n    )\r\n}\r\n\r\nexport default RegistrationSection\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport RegistrationSection from \"./components/RegistrationSection\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          {/* <Header/> */}\n          <Route path=\"/register\" component={RegistrationSection} exact />\n          {/* <Route path=\"/\" component={HomeScreen} exact />\n          <Route path=\"/search\" component={SearchScreen} exact />\n          <Route path=\"/category\" component={Category} exact />\n          <Route path=\"/admin\" component={AdminScreen} exact />\n          <Route path=\"/UnAuthAccess\" component={UnAuthAccess} exact />\n          <Route path=\"/authors\" component={AuthorList} exact />\n          <Route path=\"/books\" component={BookList} exact />\n          <Route path=\"/authorsDetails/:id\" component={AuthorDetails} exact />\n          <Route path=\"/booksDetails/:id\" component={BookDetails} exact />\n          <Route component={My404Component} /> */}\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}